x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

services:
  app-a:
    build:
      context: ./fastapi_app/
    # image: ghcr.io/blueswen/fastapi-observability/app:latest
    ports:
      - "8000:8000"
    depends_on:
      - loki
      - prometheus
    environment:
      APP_NAME: "app-a"
      # OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:5318/v1/metrics
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      #
      OTEL_SERVICE_NAME: app-a
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: http/protobuf
      OTEL_METRIC_EXPORT_INTERVAL: "5"
      OTEL_PYTHON_LOG_CORRELATION: true
      # OTEL_PYTHON_LOG_LEVEL: debug
      # For test purpose - not an official environment variable
      OTEL_AUTO_INSTRUMENTATION_LEVEL: "2"
    # To be activated only if OTEL_AUTO_INSTRUMENTATION_LEVEL == "2"
    command: ["opentelemetry-instrument", "python", "main.py"]
    logging: *default-logging

  app-b:
    build:
      context: ./fastapi_app/
    # image: ghcr.io/blueswen/fastapi-observability/app:latest
    ports:
      - "8001:8000"
    depends_on:
      - loki
      - prometheus
    environment:
      APP_NAME: "app-b"
      # OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:5318/v1/metrics
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      #
      OTEL_SERVICE_NAME: app-b
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: http/protobuf
      OTEL_METRIC_EXPORT_INTERVAL: "5"
      OTEL_PYTHON_LOG_CORRELATION: true
      # OTEL_PYTHON_LOG_LEVEL: debug
      # For test purpose - not an official environment variable
      OTEL_AUTO_INSTRUMENTATION_LEVEL: "2"
    # To be activated only if OTEL_AUTO_INSTRUMENTATION_LEVEL == "2"
    command: ["opentelemetry-instrument", "python", "main.py"]
    logging: *default-logging

  app-c:
    build:
      context: ./fastapi_app/
    # image: ghcr.io/blueswen/fastapi-observability/app:latest
    ports:
      - "8002:8000"
    depends_on:
      - loki
      - prometheus
    environment:
      APP_NAME: "app-c"
      # OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:5318/v1/metrics
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://prometheus:9090/api/v1/otlp/v1/metrics
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
      # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:5318/v1/traces
      #
      OTEL_SERVICE_NAME: app-c
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: http/protobuf
      OTEL_METRIC_EXPORT_INTERVAL: "5"
      OTEL_PYTHON_LOG_CORRELATION: true
      # OTEL_PYTHON_LOG_LEVEL: debug
      # For test purpose - not an official environment variable
      OTEL_AUTO_INSTRUMENTATION_LEVEL: "2"
    # To be activated only if OTEL_AUTO_INSTRUMENTATION_LEVEL == "2"
    command: ["opentelemetry-instrument", "python", "main.py"]
    logging: *default-logging

  # To try and/or debug using a OpenTelemetry collector
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:0.110.0
  #   ports:
  #     # Watch out for clash with tempo
  #     - "5318:5318"
  #     - "55679:55679"
  #     - "1777:1777"
  #     - "13133:13133"
  #   volumes:
  #     - ./etc/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml

  prometheus:
    image: prom/prometheus:v2.51.2
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
      # Needed for pushing metrics to prometheus directly
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
    depends_on:
      - loki
    logging: *default-logging

  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  tempo:
    image: grafana/tempo:2.4.1
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/:/etc/grafana/provisioning/datasources
      - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
      - tempo
    logging: *default-logging
